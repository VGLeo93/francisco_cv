name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare static site
        run: |
          set -e
          rm -rf dist && mkdir -p dist
          rsync -av --delete ./ dist/ \
            --exclude='dist' \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='package.json' \
            --exclude='package-lock.json'
          # Disable Jekyll so all static assets (PDFs, images) are served
          touch dist/.nojekyll
          echo "\n== Artifact contents =="
          (cd dist && find . -maxdepth 3 -type f | sort)
          echo "\n== Sizes ==" && du -h --max-depth=1 dist || true

      - name: Sanity-check required assets
        run: |
          set -e
          test -f dist/index.html
          test -f "dist/cv-francisco.png"
          test -d dist/certifications
          # Ensure at least a few PDFs exist
          ls -1 dist/certifications/*.pdf | head -n 3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait for Pages propagation
        run: sleep 20
      - name: Verify key assets are live
        env:
          URL: ${{ needs.deploy.outputs.page_url }}
        run: |
          set -e
          echo "Checking $URL"
          curl -fsSI "$URL" > /dev/null
          curl -fsSI "$URL/cv-francisco.png" > /dev/null
          curl -fsSI "$URL/certifications/machine-learning-ai-engineer-career-path.pdf" > /dev/null
